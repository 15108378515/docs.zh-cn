### YamlMime:Tutorial
title: <span data-ttu-id="28ce5-101">分支和循环</span><span class="sxs-lookup"><span data-stu-id="28ce5-101">Branches and loops</span></span>
metadata:
  title: “分支和循环”交互教程 - C# 快速入门
  description: 本快速入门教程介绍了分支和循环，读者可以使用浏览器通过交互方式了解 C#。 读者将可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.topic: get-started-article
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings
  nextTutorialTitle: <span data-ttu-id="28ce5-105">C# 中的字符串内插</span><span class="sxs-lookup"><span data-stu-id="28ce5-105">String interpolation in C#</span></span>
  ms.openlocfilehash: 2b04d2ca42906302f4191b618198d7aeb58b83a6
  ms.sourcegitcommit: 2e8acae16ae802f2d6d04e3ce0a6dbf04e476513
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 04/18/2018
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="28ce5-106">本快速入门教程介绍了如何编写代码来检查变量，并根据这些变量更改执行路径。</span><span class="sxs-lookup"><span data-stu-id="28ce5-106">This quickstart teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="28ce5-107">读者可以使用浏览器通过交互方式编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="28ce5-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="28ce5-108">本快速入门教程包含一系列课程，介绍了 C# 中的分支和循环构造。</span><span class="sxs-lookup"><span data-stu-id="28ce5-108">This quickstart contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="28ce5-109">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="28ce5-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="28ce5-110">使用 if 语句做出决定</span><span class="sxs-lookup"><span data-stu-id="28ce5-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: "<span data-ttu-id=\"28ce5-111\">在交互式窗口中，运行以下代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"28ce5-112\">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-112\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\n<span data-ttu-id=\"28ce5-113\">修改 `b` 的声明，让总和小于 10：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-113\">Modify the declaration of `b` so that the sum is less than 10:</span></span> \n\n```csharp\nint b = 3;\n```\n\n<span data-ttu-id=\"28ce5-114\">再次单击“运行”按钮。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-114\">Click the **Run** button again.</span></span> <span data-ttu-id=\"28ce5-115\">由于答案小于 10，因此什么也没有打印出来。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-115\">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id=\"28ce5-116\">要测试的条件为 false。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-116\">The **condition** you're testing is false.</span></span> <span data-ttu-id=\"28ce5-117\">没有任何可供执行的代码，因为仅为 `if` 语句编写了一个可能分支，即 true 分支。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-117\">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"28ce5-118\">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-118\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"28ce5-119\">编译器会发现并报告这些错误。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-119\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"28ce5-120\">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-120\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"28ce5-121\">这样做有助于了解 C# 代码结构。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-121\">That exercise will help you learn the structure of C# code.</span></span>     \n\n<span data-ttu-id=\"28ce5-122\">第一个示例展示了 `if` 和布尔类型的用途。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-122\">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id=\"28ce5-123\">布尔变量可以包含下列两个值之一：`true` 或 `false`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-123\">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id=\"28ce5-124\">C# 为布尔变量定义了特殊类型 `bool`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-124\">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id=\"28ce5-125\">`if` 语句检查 `bool` 的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-125\">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id=\"28ce5-126\">如果值为 `true`，执行 `if` 后面的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-126\">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id=\"28ce5-127\">否则，跳过上述语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-127\">Otherwise, it is skipped.</span></span> \n\n<span data-ttu-id=\"28ce5-128\">这种检查条件并根据条件执行语句的过程非常强大。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-128\">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id=\"28ce5-129\">接下来，将进一步探索。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-129\">Let's explore more.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"28ce5-130\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-130\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"28ce5-131\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-131\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="28ce5-132">让 if 和 else 完美配合</span><span class="sxs-lookup"><span data-stu-id="28ce5-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"28ce5-133\">若要执行 true 和 false 分支中的不同代码，请创建在条件为 false 时执行的 `else` 分支。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"28ce5-134\">试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"28ce5-135\">只有当条件的测试结果为 `false` 时，才执行 `else` 关键字后面的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"28ce5-136\">将 `if`、`else` 与布尔条件相结合，可以实现所需的一切目标。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"28ce5-137\">`if` 和 `else` 语句下的缩进是为了方便读者阅读。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"28ce5-138\">C# 语言忽略缩进或空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-138\">The C# language doesn't treat indentation or white space as significant.</span></span> <span data-ttu-id=\"28ce5-139\">`if` 或 `else` 关键字后面的语句根据条件决定是否执行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"28ce5-140\">本快速入门教程中的所有示例都遵循了常见做法，根据语句的控制流缩进代码行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-140\">All the samples in this quickstart follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"28ce5-141\">由于缩进会被忽略，因此需要使用 `{` 和 `}`，指明要在根据条件决定是否执行的代码块中添加多个语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"28ce5-142\">C# 程序员通常会对所有 `if` 和 `else` 子句使用这些大括号。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"28ce5-143\">以下示例与刚刚创建的示例相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"28ce5-144\">试运行看看。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"28ce5-145\">本快速入门教程其余部分的所有代码示例都遵循了公认做法，添加了大括号。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-145\">Through the rest of this quickstart, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"28ce5-146\">可以测试更复杂的条件：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n<span data-ttu-id=\"28ce5-147\">`&&` 表示“且”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-147\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"28ce5-148\">也就是说，两个条件必须都为 true，才能执行 true 分支中的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-148\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"28ce5-149\">这些示例还表明，可以在每个条件分支中添加多个语句，前提是将它们用 `{` 和 `}` 括住。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-149\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"28ce5-150\">还可以使用 `||` 表示“或”：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-150\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"28ce5-151\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-151\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"28ce5-152\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-152\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="28ce5-153">使用循环重复执行运算</span><span class="sxs-lookup"><span data-stu-id="28ce5-153">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: "<span data-ttu-id=\"28ce5-154\">创建更大程序时，需要考虑的另一个重要概念是循环。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-154\">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id=\"28ce5-155\">使用循环，可以重复执行要多次执行的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-155\">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id=\"28ce5-156\">在交互式窗口中，试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-156\">Try this code in the interactive window:</span></span>\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n<span data-ttu-id=\"28ce5-157\">`while` 语句检查条件，并执行 `while` 后面的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-157\">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id=\"28ce5-158\">除非条件为 false，否则它会重复检查条件，并重复执行这些语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-158\">It will repeat checking the condition and executing those statements until the condition is false.</span></span>\n\n<span data-ttu-id=\"28ce5-159\">此示例新引入了另外一个运算符。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-159\">There's one other new operator in this example.</span></span> <span data-ttu-id=\"28ce5-160\">`counter` 变量后面的 `++` 是增量运算符。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-160\">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id=\"28ce5-161\">它负责用计数器值加 1，并将计算后的值存储在计数器变量中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-161\">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"28ce5-162\">请确保 `while` 循环条件在代码执行时确实能够切换为 false。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-162\">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id=\"28ce5-163\">否则，创建的就是无限循环，即程序永不结束。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-163\">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id=\"28ce5-164\">我们就不进行演示了，因为运行代码的引擎将会超时，程序也不会有任何输出。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-164\">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>\n\n<span data-ttu-id=\"28ce5-165\">`while` 循环先测试条件，然后再执行 `while` 后面的代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-165\">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id=\"28ce5-166\">`do` ... `while` 循环先执行代码，然后再检查条件。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-166\">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id=\"28ce5-167\">代码如下所示：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-167\">It looks like this:</span></span>\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\n<span data-ttu-id=\"28ce5-168\">这个 `do` 循环和前面的 `while` 循环的工作原理相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-168\">This `do` loop and the earlier `while` loop work the same.</span></span> \n\n<span data-ttu-id=\"28ce5-169\">接下来，将继续介绍最后一个循环语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-169\">Let's move on to one last loop statement.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"28ce5-170\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-170\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"28ce5-171\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-171\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="28ce5-172">使用 for 循环</span><span class="sxs-lookup"><span data-stu-id="28ce5-172">Work with the for loop</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"28ce5-173\">C# 代码中的另一常见循环语句是 `for` 循环。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-173\">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id=\"28ce5-174\">在交互式窗口中，试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-174\">Try this code in the interactive window:</span></span>\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\n<span data-ttu-id=\"28ce5-175\">此循环的工作原理与已用过的 `while` 循环和 `do` 循环相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-175\">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id=\"28ce5-176\">`for` 语句包含三个控制具体工作方式的部分。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-176\">The `for` statement has three parts that control how it works.</span></span> \n\n<span data-ttu-id=\"28ce5-177\">第一部分是 for 初始值设定项：`for counter = 0;` 声明 `counter` 是循环变量，并将它的初始值设置为 `0`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-177\">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>\n\n<span data-ttu-id=\"28ce5-178\">中间部分是 for 条件：`counter < 10` 声明只要计数器值小于 10，此 `for` 循环就会继续执行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-178\">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>\n\n<span data-ttu-id=\"28ce5-179\">最后一部分是 for 迭代器：`counter++` 指定在执行 `for` 语句后面的代码块后，如何修改循环变量。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-179\">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id=\"28ce5-180\">在此示例中，它指定 `counter` 应在代码块每次执行时递增 1。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-180\">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>\n\n<span data-ttu-id=\"28ce5-181\">亲自试运行这些部分的代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-181\">Experiment with these yourself.</span></span> <span data-ttu-id=\"28ce5-182\">试着执行下列两项操作：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-182\">Try each of the following:</span></span>\n\n- <span data-ttu-id=\"28ce5-183\">将初始值设定项更改为其他初始值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-183\">Change the initializer to start at a different value.</span></span>\n- <span data-ttu-id=\"28ce5-184\">将结束条件设定项更改为其他值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-184\">Change the condition to stop at a different value.</span></span>\n\n<span data-ttu-id=\"28ce5-185\">完成后，继续利用所学知识，试着自己编写一些代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-185\">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"28ce5-186\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-186\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"28ce5-187\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-187\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="28ce5-188">结合使用分支和循环</span><span class="sxs-lookup"><span data-stu-id="28ce5-188">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="28ce5-189">支持，大家已了解 C# 语言中的 `if` 语句和循环构造。看看能否编写 C# 代码，计算 1 到 20 中所有可被 3 整除的整数的总和。</span><span class="sxs-lookup"><span data-stu-id="28ce5-189">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="28ce5-190">下面提供了一些提示：</span><span class="sxs-lookup"><span data-stu-id="28ce5-190">Here are a few hints:</span></span>


    - <span data-ttu-id="28ce5-191">`%` 运算符可用于获取除法运算的余数。</span><span class="sxs-lookup"><span data-stu-id="28ce5-191">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="28ce5-192">`if` 语句中的条件可用于判断是否应将数字计入总和。</span><span class="sxs-lookup"><span data-stu-id="28ce5-192">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="28ce5-193">`for` 循环有助于对 1 到 20 中的所有数字重复执行一系列步骤。</span><span class="sxs-lookup"><span data-stu-id="28ce5-193">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="28ce5-194">亲自试一试吧。</span><span class="sxs-lookup"><span data-stu-id="28ce5-194">Try it yourself.</span></span> <span data-ttu-id="28ce5-195">然后，看看自己是怎么做到的。</span><span class="sxs-lookup"><span data-stu-id="28ce5-195">Then check how you did.</span></span> <span data-ttu-id="28ce5-196">提示：你应获取的答案为 63。</span><span class="sxs-lookup"><span data-stu-id="28ce5-196">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="28ce5-197">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="28ce5-197">This online coding experience is in preview mode.</span></span> <span data-ttu-id="28ce5-198">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="28ce5-198">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="28ce5-199">完成挑战</span><span class="sxs-lookup"><span data-stu-id="28ce5-199">Complete challenge</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"28ce5-200\">已完成“分支和循环”快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-200\">You've completed the \"branches and loops\" quickstart.</span></span> \n\n<span data-ttu-id=\"28ce5-201\">你可继续在自己的开发环境中学习这些教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-201\">You can continue these quickstarts on your own development environment.</span></span> <span data-ttu-id=\"28ce5-202\">请先了解[本地开发](local-environment.md)基础知识，再选择一个快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-202\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"28ce5-203\">可以再次尝试本练习，也可以直接学习下一个快速入门教程，亦可以重新开始学习 [C# 中的数字](numbers-in-csharp-local.md)快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-203\">You can try this same exercise, move directly to the next quickstart, or start again at with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"28ce5-204\">若要详细了解这些概念，请参阅下列主题：</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-204\">You can learn more about these concepts in these topics:</span></span>\n\n<span data-ttu-id=\"28ce5-205\">[If 和 else 语句](../language-reference/keywords/if-else.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-205\">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  \n<span data-ttu-id=\"28ce5-206\">[While 语句](../language-reference/keywords/while.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-206\">[While statement](../language-reference/keywords/while.md) </span></span>  \n<span data-ttu-id=\"28ce5-207\">[Do 语句](../language-reference/keywords/do.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-207\">[Do statement](../language-reference/keywords/do.md) </span></span>  \n[<span data-ttu-id=\"28ce5-208\">For 语句</span><span class=\"sxs-lookup\"><span data-stu-id=\"28ce5-208\">For statement</span></span>](../language-reference/keywords/for.md)"
