### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="f093d-101">分支和循环</span><span class="sxs-lookup"><span data-stu-id="f093d-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="f093d-102">分支和循环</span><span class="sxs-lookup"><span data-stu-id="f093d-102">Branches and loops</span></span>
  description: '<span data-ttu-id="f093d-103">本教程介绍了分支和循环，读者可以使用浏览器通过交互方式了解 C#。</span><span class="sxs-lookup"><span data-stu-id="f093d-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="f093d-104">读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="f093d-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="f093d-105">本教程介绍了如何编写代码，从而检查变量，并根据这些变量更改执行路径。</span><span class="sxs-lookup"><span data-stu-id="f093d-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="f093d-106">读者可以使用浏览器通过交互方式编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="f093d-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="f093d-107">具体包含一系列课程，探索了 C# 中的分支和循环构造。</span><span class="sxs-lookup"><span data-stu-id="f093d-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="f093d-108">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="f093d-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="f093d-109">使用 if 语句做出决定</span><span class="sxs-lookup"><span data-stu-id="f093d-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="f093d-110">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="f093d-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="f093d-111">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class="sxs-lookup"><span data-stu-id="f093d-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="f093d-112">修改 `b` 的声明，让总和小于 10：</span><span class="sxs-lookup"><span data-stu-id="f093d-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="f093d-113">再次单击“运行”按钮。</span><span class="sxs-lookup"><span data-stu-id="f093d-113">Click the **Run** button again.</span></span> <span data-ttu-id="f093d-114">由于答案小于 10，因此什么也没有打印出来。</span><span class="sxs-lookup"><span data-stu-id="f093d-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="f093d-115">要测试的条件为 false。</span><span class="sxs-lookup"><span data-stu-id="f093d-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="f093d-116">没有任何可供执行的代码，因为仅为 `if` 语句编写了一个可能分支，即 true 分支。</span><span class="sxs-lookup"><span data-stu-id="f093d-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="f093d-117">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class="sxs-lookup"><span data-stu-id="f093d-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="f093d-118">编译器会发现并报告这些错误。</span><span class="sxs-lookup"><span data-stu-id="f093d-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="f093d-119">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class="sxs-lookup"><span data-stu-id="f093d-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="f093d-120">这样做有助于了解 C# 代码结构。</span><span class="sxs-lookup"><span data-stu-id="f093d-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="f093d-121">第一个示例展示了 `if` 和布尔类型的用途。</span><span class="sxs-lookup"><span data-stu-id="f093d-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="f093d-122">布尔变量可以包含下列两个值之一：`true` 或 `false`。</span><span class="sxs-lookup"><span data-stu-id="f093d-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="f093d-123">C# 为布尔变量定义了特殊类型 `bool`。</span><span class="sxs-lookup"><span data-stu-id="f093d-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="f093d-124">`if` 语句检查 `bool` 的值。</span><span class="sxs-lookup"><span data-stu-id="f093d-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="f093d-125">如果值为 `true`，执行 `if` 后面的语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="f093d-126">否则，跳过上述语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="f093d-127">这种检查条件并根据条件执行语句的过程非常强大。</span><span class="sxs-lookup"><span data-stu-id="f093d-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="f093d-128">接下来，将进一步探索。</span><span class="sxs-lookup"><span data-stu-id="f093d-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="f093d-129">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f093d-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f093d-130">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f093d-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="f093d-131">让 if 和 else 完美配合</span><span class="sxs-lookup"><span data-stu-id="f093d-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="f093d-132">若要执行 true 和 false 分支中的不同代码，请创建在条件为 false 时执行的 `else` 分支。</span><span class="sxs-lookup"><span data-stu-id="f093d-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="f093d-133">试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="f093d-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="f093d-134">只有当条件的测试结果为 `false` 时，才执行 `else` 关键字后面的语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="f093d-135">将 `if`、`else` 与布尔条件相结合，可以实现所需的一切目标。</span><span class="sxs-lookup"><span data-stu-id="f093d-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="f093d-136">`if` 和 `else` 语句下的缩进是为了方便读者阅读。</span><span class="sxs-lookup"><span data-stu-id="f093d-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="f093d-137">C# 语言忽略缩进或空格。</span><span class="sxs-lookup"><span data-stu-id="f093d-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="f093d-138">`if` 或 `else` 关键字后面的语句根据条件决定是否执行。</span><span class="sxs-lookup"><span data-stu-id="f093d-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="f093d-139">本教程中的所有示例都遵循一种常见做法，缩进需要执行的代码行。</span><span class="sxs-lookup"><span data-stu-id="f093d-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="f093d-140">由于缩进会被忽略，因此需要使用 `{` 和 `}`，指明要在根据条件决定是否执行的代码块中添加多个语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="f093d-141">C# 程序员通常会对所有 `if` 和 `else` 子句使用这些大括号。</span><span class="sxs-lookup"><span data-stu-id="f093d-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="f093d-142">以下示例与刚刚创建的示例相同。</span><span class="sxs-lookup"><span data-stu-id="f093d-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="f093d-143">试运行看看。</span><span class="sxs-lookup"><span data-stu-id="f093d-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="f093d-144">在本教程的其余部分中，代码示例全都遵循公认做法，添加了大括号。</span><span class="sxs-lookup"><span data-stu-id="f093d-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="f093d-145">可以测试更复杂的条件：</span><span class="sxs-lookup"><span data-stu-id="f093d-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="f093d-146">`&&` 表示“且”。</span><span class="sxs-lookup"><span data-stu-id="f093d-146">The `&&` represents "and".</span></span> <span data-ttu-id="f093d-147">也就是说，两个条件必须都为 true，才能执行 true 分支中的语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="f093d-148">这些示例还表明，可以在每个条件分支中添加多个语句，前提是将它们用 `{` 和 `}` 括住。</span><span class="sxs-lookup"><span data-stu-id="f093d-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="f093d-149">还可以使用 `||` 表示“或”：</span><span class="sxs-lookup"><span data-stu-id="f093d-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="f093d-150">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f093d-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f093d-151">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f093d-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="f093d-152">使用循环重复执行运算</span><span class="sxs-lookup"><span data-stu-id="f093d-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="f093d-153">创建更大程序时，需要考虑的另一个重要概念是循环。</span><span class="sxs-lookup"><span data-stu-id="f093d-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="f093d-154">使用循环，可以重复执行要多次执行的语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="f093d-155">在交互式窗口中，试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="f093d-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="f093d-156">`while` 语句检查条件，并执行 `while` 后面的语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="f093d-157">除非条件为 false，否则它会重复检查条件，并重复执行这些语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="f093d-158">此示例新引入了另外一个运算符。</span><span class="sxs-lookup"><span data-stu-id="f093d-158">There's one other new operator in this example.</span></span> <span data-ttu-id="f093d-159">`counter` 变量后面的 `++` 是增量运算符。</span><span class="sxs-lookup"><span data-stu-id="f093d-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="f093d-160">它负责用计数器值加 1，并将计算后的值存储在计数器变量中。</span><span class="sxs-lookup"><span data-stu-id="f093d-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="f093d-161">请确保 `while` 循环条件在代码执行时确实能够切换为 false。</span><span class="sxs-lookup"><span data-stu-id="f093d-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="f093d-162">否则，创建的就是无限循环，即程序永不结束。</span><span class="sxs-lookup"><span data-stu-id="f093d-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="f093d-163">我们就不进行演示了，因为运行代码的引擎将会超时，程序也不会有任何输出。</span><span class="sxs-lookup"><span data-stu-id="f093d-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="f093d-164">`while` 循环先测试条件，然后再执行 `while` 后面的代码。</span><span class="sxs-lookup"><span data-stu-id="f093d-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="f093d-165">`do` ... `while` 循环先执行代码，然后再检查条件。</span><span class="sxs-lookup"><span data-stu-id="f093d-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="f093d-166">代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="f093d-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="f093d-167">这个 `do` 循环和前面的 `while` 循环的工作原理相同。</span><span class="sxs-lookup"><span data-stu-id="f093d-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="f093d-168">接下来，将继续介绍最后一个循环语句。</span><span class="sxs-lookup"><span data-stu-id="f093d-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="f093d-169">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f093d-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f093d-170">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f093d-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="f093d-171">使用 for 循环</span><span class="sxs-lookup"><span data-stu-id="f093d-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="f093d-172">C# 代码中的另一常见循环语句是 `for` 循环。</span><span class="sxs-lookup"><span data-stu-id="f093d-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="f093d-173">在交互式窗口中，试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="f093d-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="f093d-174">此循环的工作原理与已用过的 `while` 循环和 `do` 循环相同。</span><span class="sxs-lookup"><span data-stu-id="f093d-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="f093d-175">`for` 语句包含三个控制具体工作方式的部分。</span><span class="sxs-lookup"><span data-stu-id="f093d-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="f093d-176">第一部分是 for 初始值设定项：`for counter = 0;` 声明 `counter` 是循环变量，并将它的初始值设置为 `0`。</span><span class="sxs-lookup"><span data-stu-id="f093d-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="f093d-177">中间部分是 for 条件：`counter < 10` 声明只要计数器值小于 10，此 `for` 循环就会继续执行。</span><span class="sxs-lookup"><span data-stu-id="f093d-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="f093d-178">最后一部分是 for 迭代器：`counter++` 指定在执行 `for` 语句后面的代码块后，如何修改循环变量。</span><span class="sxs-lookup"><span data-stu-id="f093d-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="f093d-179">在此示例中，它指定 `counter` 应在代码块每次执行时递增 1。</span><span class="sxs-lookup"><span data-stu-id="f093d-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="f093d-180">亲自试运行这些部分的代码。</span><span class="sxs-lookup"><span data-stu-id="f093d-180">Experiment with these yourself.</span></span> <span data-ttu-id="f093d-181">试着执行下列两项操作：</span><span class="sxs-lookup"><span data-stu-id="f093d-181">Try each of the following:</span></span>

      - <span data-ttu-id="f093d-182">将初始值设定项更改为其他初始值。</span><span class="sxs-lookup"><span data-stu-id="f093d-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="f093d-183">将结束条件设定项更改为其他值。</span><span class="sxs-lookup"><span data-stu-id="f093d-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="f093d-184">完成后，继续利用所学知识，试着自己编写一些代码。</span><span class="sxs-lookup"><span data-stu-id="f093d-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="f093d-185">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f093d-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f093d-186">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f093d-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="f093d-187">结合使用分支和循环</span><span class="sxs-lookup"><span data-stu-id="f093d-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="f093d-188">支持，大家已了解 C# 语言中的 `if` 语句和循环构造。看看能否编写 C# 代码，计算 1 到 20 中所有可被 3 整除的整数的总和。</span><span class="sxs-lookup"><span data-stu-id="f093d-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="f093d-189">下面提供了一些提示：</span><span class="sxs-lookup"><span data-stu-id="f093d-189">Here are a few hints:</span></span>

      - <span data-ttu-id="f093d-190">`%` 运算符可用于获取除法运算的余数。</span><span class="sxs-lookup"><span data-stu-id="f093d-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="f093d-191">`if` 语句中的条件可用于判断是否应将数字计入总和。</span><span class="sxs-lookup"><span data-stu-id="f093d-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="f093d-192">`for` 循环有助于对 1 到 20 中的所有数字重复执行一系列步骤。</span><span class="sxs-lookup"><span data-stu-id="f093d-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="f093d-193">亲自试一试吧。</span><span class="sxs-lookup"><span data-stu-id="f093d-193">Try it yourself.</span></span> <span data-ttu-id="f093d-194">然后，看看自己是怎么做到的。</span><span class="sxs-lookup"><span data-stu-id="f093d-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="f093d-195">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f093d-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f093d-196">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f093d-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="f093d-197">完成挑战</span><span class="sxs-lookup"><span data-stu-id="f093d-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="f093d-198">已完成“分支和循环”教程。</span><span class="sxs-lookup"><span data-stu-id="f093d-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="f093d-199">若要详细了解这些概念，请参阅下列主题：</span><span class="sxs-lookup"><span data-stu-id="f093d-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="f093d-200">[If 和 else 语句](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="f093d-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="f093d-201">[While 语句](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="f093d-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="f093d-202">[Do 语句](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="f093d-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="f093d-203">For 语句</span><span class="sxs-lookup"><span data-stu-id="f093d-203">For statement</span></span>](../language-reference/keywords/for.md)