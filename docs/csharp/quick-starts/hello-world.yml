### YamlMime:Tutorial
title: <span data-ttu-id="0a4f4-101">C# 初探</span><span class="sxs-lookup"><span data-stu-id="0a4f4-101">Hello C#</span></span>
metadata:
  title: “Hello World”交互教程 - C# 快速入门
  description: 在本快速入门教程中，读者可以使用浏览器通过交互方式了解 C#。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  level: Beginner
  ms.topic: get-started-article
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: <span data-ttu-id="0a4f4-105">C# 中的数字</span><span class="sxs-lookup"><span data-stu-id="0a4f4-105">Numbers in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: 8d7e98e8dbd3e9b49269ce0d1cb1900059715b54
  ms.sourcegitcommit: 935d5267c44f9bce801468ef95f44572f1417e8c
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/28/2018
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="0a4f4-106">本快速入门教程通过交互方式介绍了 C#，读者可以使用浏览器编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-106">This quickstart teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="0a4f4-107">具体包含一系列课程，最先介绍的就是“Hello World”程序。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-107">It contains a series of lessons that begin with a "Hello World" program.</span></span> <span data-ttu-id="0a4f4-108">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="0a4f4-109">运行首个 C# 程序</span><span class="sxs-lookup"><span data-stu-id="0a4f4-109">Run your first C# program</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"0a4f4-110\">在交互式窗口中，运行以下代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"0a4f4-111\">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\n<span data-ttu-id=\"0a4f4-112\">祝贺你！</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-112\">Congratulations!</span></span> <span data-ttu-id=\"0a4f4-113\">已运行首个 C# 程序。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-113\">You've run your first C# program.</span></span> <span data-ttu-id=\"0a4f4-114\">这是一个简单程序，可输出消息“Hello World!”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-114\">It's a simple program that prints the message \"Hello World!\".</span></span> <span data-ttu-id=\"0a4f4-115\">它使用 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法打印此消息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-115\">It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message.</span></span> <span data-ttu-id=\"0a4f4-116\">`Console` 是表示控制台窗口的类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-116\">`Console` is a type that represents the console window.</span></span> <span data-ttu-id=\"0a4f4-117\">`WriteLine` 是 `Console` 类型的方法，负责将文本行打印到文本控制台。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-117\">`WriteLine` is a method of the `Console` type that prints a line of text to that text console.</span></span>\n\n<span data-ttu-id=\"0a4f4-118\">接下来，将继续进一步探索。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-118\">Let's move on and explore more.</span></span> <span data-ttu-id=\"0a4f4-119\">本课程的其余部分探索了如何使用在 C# 中表示文本的 `string` 类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-119\">The rest of this lesson explores working with the `string` type, which represents text in C#.</span></span> <span data-ttu-id=\"0a4f4-120\">与 `Console` 类型一样，`string` 类型也包含方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-120\">Like the `Console` type, the `string` type has methods.</span></span> <span data-ttu-id=\"0a4f4-121\">`string` 方法处理的是文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-121\">The `string` methods work with text.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"0a4f4-122\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-122\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0a4f4-123\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-123\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0a4f4-124">声明和使用变量</span><span class="sxs-lookup"><span data-stu-id="0a4f4-124">Declare and use variables</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"0a4f4-125\">首个程序在屏幕上打印出了 `string`“Hello World!”</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-125\">Your first program printed the `string` \"Hello World!\"</span></span> <span data-ttu-id=\"0a4f4-126\">。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-126\">on the screen.</span></span> \n\n> [!TIP]\n> <span data-ttu-id=\"0a4f4-127\">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-127\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"0a4f4-128\">编译器会发现并报告这些错误。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-128\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"0a4f4-129\">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-129\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"0a4f4-130\">这样做有助于了解 C# 代码结构。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-130\">That exercise will help you learn the structure of C# code.</span></span> \n\n<span data-ttu-id=\"0a4f4-131\">首个程序只能打印一条消息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-131\">Your first program is limited to printing one message.</span></span> <span data-ttu-id=\"0a4f4-132\">可以使用变量编写更实用的程序。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-132\">You can write more useful programs by using **variables**.</span></span> <span data-ttu-id=\"0a4f4-133\">借助变量符号，可以使用不同的值运行同一代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-133\">A **variable** is a symbol you can use to run the same code with different values.</span></span> <span data-ttu-id=\"0a4f4-134\">试一试吧！</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-134\">Let's try it!</span></span> <span data-ttu-id=\"0a4f4-135\">将在交互式窗口中已编写的代码替换为以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-135\">Replace the code you've written in the interactive window with the following code:</span></span>\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"0a4f4-136\">第一行代码声明变量 `aFriend`，并为它分配值“Bill”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-136\">The first line declares a variable, `aFriend` and assigns it a value, \"Bill\".</span></span> <span data-ttu-id=\"0a4f4-137\">第二行代码打印出姓名。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-137\">The second line prints out the name.</span></span>\n\n<span data-ttu-id=\"0a4f4-138\">可以向声明的任何变量分配不同的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-138\">You can assign different values to any variable you declare.</span></span> <span data-ttu-id=\"0a4f4-139\">可以将姓名更改为自己一个好友的姓名。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-139\">You can change the name to one of your friends.</span></span> <span data-ttu-id=\"0a4f4-140\">在交互式窗口中已添加的代码后面，添加以下两行代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-140\">Add these two lines in the interactive window following the code you've already added:</span></span>\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"0a4f4-141\">可以看到，同一行代码根据 `aFriend` 变量中存储的值，打印两条不同的消息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-141\">Notice that the same line of code prints two different messages, based on the value stored in the `aFriend` variable.</span></span>\n\n<span data-ttu-id=\"0a4f4-142\">可能还会注意到，最后两条消息中没有“Hello”一词。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-142\">You may have also noticed that the word \"Hello\" was missing in the last two messages.</span></span> <span data-ttu-id=\"0a4f4-143\">现在就来解决一下这个问题。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-143\">Let's fix that now.</span></span>  <span data-ttu-id=\"0a4f4-144\">将负责打印消息的代码行修改为以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-144\">Modify the lines that print the message to the following:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\n<span data-ttu-id=\"0a4f4-145\">再次单击“运行”，看看结果如何。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-145\">Click **Run** again to see the results.</span></span>\n\n<span data-ttu-id=\"0a4f4-146\">在此过程中，使用 `+` 创建用于打印的字符串变得非常麻烦。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-146\">As we progress, creating strings to print using `+` becomes cumbersome.</span></span> <span data-ttu-id=\"0a4f4-147\">借助[字符串内插](../language-reference/tokens/interpolated.md)，可以通过更简洁、更具可读性的方式组合字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-147\">[String interpolation](../language-reference/tokens/interpolated.md) lets you piece together strings in a more concise and readable way.</span></span>\n\n<span data-ttu-id=\"0a4f4-148\">如果在字符串的左引号前添加 `$`，则可在大括号内的字符串中添加表达式，如 `aFriend` 变量。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-148\">If you add a `$` before the opening quotes of the string, you can then include expressions, like the `aFriend` variable, inside the string in curly brackets.</span></span>\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\n<span data-ttu-id=\"0a4f4-149\">再次单击“运行”，看看结果如何。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-149\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"0a4f4-150\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-150\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0a4f4-151\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-151\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0a4f4-152">使用字符串</span><span class="sxs-lookup"><span data-stu-id="0a4f4-152">Work with strings</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="0a4f4-153">上次编辑是对字符串用途的初探。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-153">Your last edit was our first look at what you can do with strings.</span></span> <span data-ttu-id="0a4f4-154">接下来，将进一步探索。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-154">Let's explore more.</span></span>


    <span data-ttu-id="0a4f4-155">`+` 是 C# 运算符。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-155">The `+` is called an operator in C#.</span></span> <span data-ttu-id="0a4f4-156">如果应用于字符串（如 `firstString + secondString`），则会新建一个字符串，内含第一个字符串的文本，后跟第二个字符串的文本。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-156">When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second.</span></span> <span data-ttu-id="0a4f4-157">这称为“字符串串联”。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-157">This is referred to as *string concatenation*.</span></span> <span data-ttu-id="0a4f4-158">可以组合任意数量的字符串，包括字符串变量。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-158">You can combine any number of strings, including string variables.</span></span>  <span data-ttu-id="0a4f4-159">试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="0a4f4-159">Try this:</span></span>


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    <span data-ttu-id="0a4f4-160">在进一步探索字符串的过程中，发现可以使用 `Length` 确定字符串长度。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-160">As you explore more with strings, you can find the length of a string using `Length`.</span></span> <span data-ttu-id="0a4f4-161">`Length` 是字符串属性，可返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-161">`Length` is a **property** of a string and it returns the number of characters in that string.</span></span> <span data-ttu-id="0a4f4-162">在交互式窗口的底部，添加以下代码：</span><span class="sxs-lookup"><span data-stu-id="0a4f4-162">Add the following code at the bottom of the interactive window:</span></span>


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > <span data-ttu-id="0a4f4-163">这是自行探索的良好时机。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-163">This is a good time to explore on your own.</span></span> <span data-ttu-id="0a4f4-164">已了解到，`Console.WriteLine()` 将文本写入屏幕。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-164">You've learned that `Console.WriteLine()` writes text to the screen.</span></span> <span data-ttu-id="0a4f4-165">也已学习了如何声明变量，以及如何串联字符串。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-165">You've learned how to declare variables and concatenate strings together.</span></span> <span data-ttu-id="0a4f4-166">在交互式窗口中试一试吧。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-166">Experiment in the interactive window.</span></span> <span data-ttu-id="0a4f4-167">试着自已编写其他一些消息。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-167">Write some more messages yourself.</span></span> <span data-ttu-id="0a4f4-168">使用 `+` 运算符生成字符串。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-168">Build strings using the `+` operator.</span></span>


    > [!NOTE]

    > <span data-ttu-id="0a4f4-169">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0a4f4-170">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0a4f4-171">发掘字符串的更多精彩用途</span><span class="sxs-lookup"><span data-stu-id="0a4f4-171">Do more with strings</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"0a4f4-172\">一直在使用方法 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 打印消息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-172\">You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages.</span></span> <span data-ttu-id=\"0a4f4-173\">方法是用于实现某操作的代码块。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-173\">A **method** is a block of code that implements some action.</span></span> <span data-ttu-id=\"0a4f4-174\">它有名称，这样就可以访问方法了。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-174\">It has a name, so you can access it.</span></span> \n\n<span data-ttu-id=\"0a4f4-175\">`string` 类型包含许多实用方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-175\">The `string` type has many useful methods.</span></span> <span data-ttu-id=\"0a4f4-176\">接下来，将探索 <xref:System.String.Trim%2A> 方法及相关方法 <xref:System.String.TrimStart%2A> 和 <xref:System.String.TrimEnd%2A>。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-176\">Let's explore the <xref:System.String.Trim%2A> method, and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A>.</span></span> <span data-ttu-id=\"0a4f4-177\">这些方法用于删除前导空格和尾随空格：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-177\">These methods remove leading and trailing spaces:</span></span>\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\n<span data-ttu-id=\"0a4f4-178\">此示例强调了使用字符串时需要注意的几个重要概念。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-178\">This sample reinforces a couple of important concepts for working with strings.</span></span> <span data-ttu-id=\"0a4f4-179\">控制字符串的方法返回的是新字符串对象，而不是就地进行修改。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-179\">The methods that manipulate strings return new string objects rather than making modifications in place.</span></span> <span data-ttu-id=\"0a4f4-180\">可以看到，对任何 `Trim` 方法的所有调用都是返回新字符串，而不是更改原始消息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-180\">You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.</span></span>\n\n<span data-ttu-id=\"0a4f4-181\">还可以通过其他方法使用字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-181\">There are other methods available to work with a string.</span></span> <span data-ttu-id=\"0a4f4-182\">例如，可能已在编辑器或字处理器中使用了搜索和替换命令。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-182\">For example, you've probably used a search and replace command in an editor or word processor.</span></span> <span data-ttu-id=\"0a4f4-183\"><xref:System.String.Replace%2A> 方法在 `string` 中执行类似操作。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-183\">The <xref:System.String.Replace%2A> method does something similar in a `string`.</span></span> <span data-ttu-id=\"0a4f4-184\">此方法搜索子字符串，并将它替换为其他文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-184\">It searches for a substring, and replaces it with different text.</span></span> <span data-ttu-id=\"0a4f4-185\"><xref:System.String.Replace%2A> 方法需要使用两个参数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-185\">The <xref:System.String.Replace%2A> method takes two **parameters**.</span></span> <span data-ttu-id=\"0a4f4-186\">这两个字符串用括号括住。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-186\">These are the strings between the parentheses.</span></span> <span data-ttu-id=\"0a4f4-187\">第一个字符串是要搜索的文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-187\">The first string is the text to search for.</span></span> <span data-ttu-id=\"0a4f4-188\">第二个字符串是替换后的文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-188\">The second string is the text to replace it with.</span></span> <span data-ttu-id=\"0a4f4-189\">亲自试一试吧。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-189\">Try it for yourself.</span></span> <span data-ttu-id=\"0a4f4-190\">添加以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-190\">Add this code:</span></span>\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\n<span data-ttu-id=\"0a4f4-191\">还有两个实用方法，可以将字符串设为全部大写或小写。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-191\">Two other useful methods make a string ALL CAPS or all lower case.</span></span> <span data-ttu-id=\"0a4f4-192\">试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-192\">Try the following code:</span></span>\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"0a4f4-193\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-193\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0a4f4-194\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-194\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0a4f4-195">搜索字符串</span><span class="sxs-lookup"><span data-stu-id="0a4f4-195">Search strings</span></span>
  durationInMinutes: 10
  content: "<span data-ttu-id=\"0a4f4-196\">搜索和替换操作的另一方面是，查找字符串中的文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-196\">The other part of a *search and replace* operation is to find text in a string.</span></span> <span data-ttu-id=\"0a4f4-197\">可以使用 <xref:System.String.Contains%2A> 方法进行搜索。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-197\">You can use the  <xref:System.String.Contains%2A> method for searching.</span></span> <span data-ttu-id=\"0a4f4-198\">此方法可确定字符串是否包含子字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-198\">It tells you if a string contains a substring inside it.</span></span> <span data-ttu-id=\"0a4f4-199\">若要探索 <xref:System.String.Contains%2A>，请试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-199\">Try the following code to explore <xref:System.String.Contains%2A>:</span></span>\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\n<span data-ttu-id=\"0a4f4-200\"><xref:System.String.Contains%2A> 方法返回布尔值，指明是否找到了要搜索的字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-200\">The <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the string you were searching for was found.</span></span> <span data-ttu-id=\"0a4f4-201\">布尔变量存储 `true` 或 `false` 值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-201\">A **boolean** stores either a `true` or a `false` value.</span></span> <span data-ttu-id=\"0a4f4-202\">今后推出的课程将详细介绍布尔值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-202\">You'll learn more about **boolean** values in a later lesson.</span></span>\n\n<span data-ttu-id=\"0a4f4-203\">***挑战***</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-203\">***Challenge***</span></span>\n\n<span data-ttu-id=\"0a4f4-204\">有两个类似方法 <xref:System.String.StartsWith%2A> 和 <xref:System.String.EndsWith%2A>，也可以在字符串中搜索子字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-204\">There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string.</span></span> <span data-ttu-id=\"0a4f4-205\">这些方法搜索字符串开头或结尾的子字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-205\">These find a substring at the beginning or the end of the string.</span></span> <span data-ttu-id=\"0a4f4-206\">试着将上一示例修改为使用 <xref:System.String.StartsWith%2A> 和 <xref:System.String.EndsWith%2A>，而不是使用 <xref:System.String.Contains%2A>。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-206\">Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id=\"0a4f4-207\">搜索字符串开头是否有“You”或“goodbye”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-207\">Search for \"You\" or \"goodbye\" at the beginning of a string.</span></span> <span data-ttu-id=\"0a4f4-208\">搜索字符串末尾是否有“hello”或“goodbye”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-208\">Search for \"hello\" or \"goodbye\" at the end of a string.</span></span>\n\n> [!Note]\n> <span data-ttu-id=\"0a4f4-209\">针对字符串结尾文本测试时，请注意标点符号。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-209\">Watch your punctuation when you test for the text at the end of the string.</span></span> <span data-ttu-id=\"0a4f4-210\">如果字符串以句点结尾，必须检查是否有以句点结尾的字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-210\">If the string ends with a period, you must check for a string that ends with a period.</span></span>\n\n<span data-ttu-id=\"0a4f4-211\">如果字符串以“You”开头，以“hello”结尾的字符串，则应获得 `true`；如果以“goodbye”为开头或结尾，则获得 false。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-211\">You should get `true` for starting with \"You\" and ending with \"hello\" and false for starting with or ending with \"goodbye\".</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"0a4f4-212\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-212\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0a4f4-213\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a4f4-213\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0a4f4-214">完成挑战</span><span class="sxs-lookup"><span data-stu-id="0a4f4-214">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="0a4f4-215">最后是否生成如下代码？</span><span class="sxs-lookup"><span data-stu-id="0a4f4-215">Did you come up with something like this?</span></span>


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > <span data-ttu-id="0a4f4-216">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-216">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0a4f4-217">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-217">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="0a4f4-218">已完成“C# 初探”快速入门教程。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-218">You've completed the "Hello C#" quickstart.</span></span>


    <span data-ttu-id="0a4f4-219">若要详细了解如何使用 `string` 类型，可以参阅有关[字符串](../programming-guide/strings/index.md)的 [C# 编程指南](../programming-guide/index.md)主题。</span><span class="sxs-lookup"><span data-stu-id="0a4f4-219">You can learn more about working with the `string` type in the [C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).</span></span>

    <span data-ttu-id="0a4f4-220">[有关字符串的操作方法提示](../how-to/index.md#strings).</span><span class="sxs-lookup"><span data-stu-id="0a4f4-220">[How to tips on strings](../how-to/index.md#strings).</span></span>
