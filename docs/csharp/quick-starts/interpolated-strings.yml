### YamlMime:Tutorial
title: "<span data-ttu-id=\"71650-101\">C# 中的内插字符串</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-101\">Interpolated strings in C#</span></span>"
metadata:
  title: "C# 中的内插字符串。 学习构建包含其他值（如日期或数字）的字符串。"
  description: "在本教程中，读者将通过浏览器以交互方式使用 C# 内插字符串功能。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。"
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "<span data-ttu-id=\"71650-106\">C# 中的集合</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-106\">Collections in C#</span></span>"
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "<span data-ttu-id=\"71650-107\">本快速入门介绍如何在 C# 中以交互方式使用内插字符串将值插入到单个输出字符串中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-107\">This quick start teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id=\"71650-108\">读者可以使用浏览器编写 C# 代码并即时查看编译和运行代码的结果。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-108\">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id=\"71650-109\">快速入门包含一系列课程，包括连接字符串、向字符串中插入值，以及用不同方式对这些值进行格式化。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-109\">The quick start contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>\n"
- title: "<span data-ttu-id=\"71650-110\">创建内插字符串</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-110\">Create an interpolated string</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"71650-111\">在交互式窗口中，运行以下代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"71650-112\">为此，请在交互式窗口中键入以下代码块（将“\\<name>”替换为自己的名称），再单击“运行”按钮：</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-112\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"71650-113\">当运行该程序时，它会在问候语中显示一个包含你的姓名的字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-113\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"71650-114\"><xref:System.Console.WriteLine%2A> 方法调用中包含的字符串是一个内插字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-114\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"71650-115\">这是一种模板，可让你用包含嵌入代码的字符串构造单个字符串（称为结果字符串）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-115\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"71650-116\">内插字符串特别适用于将值插入字符串或连接字符串（将字符串联在一起）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-116\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"71650-117\">该简单示例包含了每个内插字符串必须具有的两个元素：</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-117\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"71650-118\">字符串文本以 `$` 字符开头，后接左双引号字符。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-118\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"71650-119\">`$` 符号和引号字符之间不能有空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-119\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"71650-120\">（如果希望看到包含空格会发生什么情况，请在交互式窗口中的 `$` 字符后面插入一个空格，然后单击“运行”按钮。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-120\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"71650-121\">C# 编译器报错“意外的字符 '$'”。）</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-121\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"71650-122\">一个或多个内插表达式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-122\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"71650-123\">左大括号和右大括号（`{` 和 `}`）指示内插表达式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-123\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"71650-124\">可将任何返回值的 C# 表达式置于大括号内（包括 `null`）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-124\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"71650-125\">下面再尝试一些其他数据类型的内插字符串示例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-125\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"71650-126\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-126\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"71650-127\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-127\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"71650-128\">包含不同的数据类型</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-128\">Include different data types</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"71650-129\">上一节快速入门教程使用了内插字符串将一个字符串插入到了另一字符串中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-129\">In the previous quick start, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"71650-130\">不过，内插字符串表达式可以是任何数据类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-130\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"71650-131\">下面尝试一个具有多种数据类型值的内插字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-131\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"71650-132\">以下示例包含带有 `Vegetable` 对象、`Unit` 枚举成员、<xref:System.DateTime> 值和 <xref:System.Decimal> 值的内插表达式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-132\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"71650-133\">在交互式窗口中运行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-133\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"71650-134\">请注意，其中一个内插表达式包含控制台上显示的结果字符串中的 `item` 对象，在这种情况下，字符串“eggplant”将插入到结果字符串中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-134\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"71650-135\">这是因为，当内插表达式的类型不是字符串时，C# 编译器会执行以下操作：</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-135\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"71650-136\">如果内插表达式为 `null`，内插表达式将返回一个空字符串（\"\" 或 <xref:System.String.Empty?displayProperty=nameWithType>）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-136\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"71650-137\">如果内插表达式不是 `null`，则调用内插表达式类型的 `ToString` 方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-137\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"71650-138\">你可以在内插表达式前面添加注释符号（`//`注释掉示例中的 `Vegetable.ToString` 方法的定义，以此方式来进行测试。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-138\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"71650-139\">在输出中，字符串“eggplant”被替换为完全限定的类型名称（由 C# REPL 定义的名称空间以及类型名称），这是 <xref:System.Object.ToString?displayProperty=nameWithType> 方法的默认行为。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-139\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"71650-140\">在此示例的输出中，日期过于精确（eggplant 的价格不会以秒为单位变化），且价格值没有标明货币单位。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-140\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"71650-141\">下一步将介绍如何通过控制内插表达式返回的字符串格式来解决这些问题。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-141\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"71650-142\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-142\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"71650-143\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-143\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"71650-144\">控制内插表达式的格式</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-144\">Control the formatting of interpolated expressions</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"71650-145\">上一节课将两个格式不正确的字符串插入到了结果字符串中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-145\">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id=\"71650-146\">一个是日期和时间值，只有日期是合适的。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-146\">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id=\"71650-147\">另一个是价格没有标明货币单位。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-147\">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id=\"71650-148\">这两个问题都很容易解决。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-148\">Both issues are easy to address.</span></span> <span data-ttu-id=\"71650-149\">内插表达式可以包含控制特定类型格式的格式字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-149\">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id=\"71650-150\">将前面示例中的调用修改为 `Console.WriteLine`，以包含日期和价格字段的格式说明符，如以下行所示：</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-150\">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\n<span data-ttu-id=\"71650-151\">可通过在内插表达式后接冒号和格式字符串来指定格式字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-151\">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id=\"71650-152\">“d”是[标准日期和时间格式字符串](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，表示短日期格式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-152\">\"d\" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id=\"71650-153\">“C2”是[标准数值格式字符串](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，用数字表示货币值（精确到小数点后两位）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-153\">\"C2\" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>\n\n<span data-ttu-id=\"71650-154\">.NET Standard 库中的许多类型支持一组预定义的格式字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-154\">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id=\"71650-155\">这些格式字符串包括所有数值类型以及日期和时间类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-155\">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id=\"71650-156\">有关支持格式字符串的完整类型列表，请参阅 [.NET 中的格式化类型](../../standard/base-types/formatting-types.md)文章中的[格式字符串和. NET 类库类型](../../standard/base-types/formatting-types.md#stringRef)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-156\">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id=\"71650-157\">任何类型都可以支持一组格式字符串，你也可以开发自定义格式设置扩展，为现有类型提供自定义格式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-157\">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id=\"71650-158\">有关通过提供 <xref:System.ICustomFormatter> 实现进行自定义格式设置的信息，请参阅 [.NET 中的格式化类型](../../standard/base-types/formatting-types.md)文章中的[使用 ICustomFormatter 进行自定义格式设置](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-158\">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>\n\n<span data-ttu-id=\"71650-159\">尝试在 .NET 编辑器中修改格式字符串，查看更改如何影响日期和时间以及数值的格式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-159\">Try modifying the the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id=\"71650-160\">将 `{date:d}` 中的“d”更改为“t”（显示短时间格式）、“y”（显示年份和月份）和“yyyy”（显示四位数年份）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-160\">Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).</span></span> <span data-ttu-id=\"71650-161\">将 `{price:C2}` 中的“C2”更改为“e”（用于指数计数法）和“F3”（使数值在小数点后保持三位数字）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-161\">Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).</span></span>\n\n<span data-ttu-id=\"71650-162\">除了控制格式之外，还可以控制内插表达式返回字符串的字段宽度和对齐方式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-162\">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id=\"71650-163\">下一步将介绍如何执行此操作。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-163\">In the next step, you'll learn how to do this.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"71650-164\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-164\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"71650-165\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-165\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"71650-166\">控制内插表达式的字段宽度和对齐方式</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-166\">Control the field width and alignment of interpolated expressions</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"71650-167\">通常，当结果字符串中包含内插表达式返回的字符串时，该字符串没有前导或尾随空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-167\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"71650-168\">特别是对于使用一组数据的情况，使用内插表达式可以指定字段宽度及其对齐方式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-168\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"71650-169\">若要查看，请运行以下代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-169\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"71650-170\">项目名称为左对齐，其数量为右对齐。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-170\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"71650-171\">通过在表达式后面添加一个逗号 (\",\") 并指定字段宽度来指定对齐方式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-171\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"71650-172\">如果字段宽度是正数，则该字段为右对齐：</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-172\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"71650-173\">如果字段宽度是负数，则该字段为左对齐：</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-173\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"71650-174\">尝试删除 `{\"Item\",-25}` 和 `{item.Key,-25}` 内插表达式中的负号，然后再次运行该示例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-174\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"71650-175\">此时，项目名称为右对齐。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-175\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"71650-176\">可在单个内插表达式中合并字段宽度和格式字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-176\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"71650-177\">字段宽度在前，后接冒号和格式字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-177\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"71650-178\">尝试以下示例程序，该程序使用定义的字段宽度显示三个格式化字符串。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-178\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"71650-179\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-179\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"71650-180\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-180\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"71650-181\">你已完成内插字符串快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-181\">You've completed the interpolated strings quick start.</span></span> \n\n<span data-ttu-id=\"71650-182\">可以在自己的本地开发环境中继续学习这些快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-182\">You can continue these quick starts on your own local development environment.</span></span> <span data-ttu-id=\"71650-183\">了解[本地开发](local-environment.md)的基础知识并选择一个快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-183\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"71650-184\">可以再次尝试本练习、直接进入到下一个快速入门教程，或重新开始学习 [C# 中的数字](numbers-in-csharp-local.md)快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-184\">You can try this same exercise, move directly to the next quick start, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"71650-185\">可在 C# 参考的[内插字符串](../language-reference/keywords/interpolated-strings.md)主题中了解有关使用内插字符串的详细信息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"71650-185\">You can learn more about working with interpolated strings in the [Interpolated Strings](../language-reference/keywords/interpolated-strings.md) topic in the C# Reference.</span></span>\0"
