### YamlMime:Tutorial
title: C# 中的内插字符串
metadata:
  title: “内插的字符串”交互教程 - C# 快速入门
  description: 在本教程中，读者将通过浏览器以交互方式使用 C# 内插字符串功能。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: C# 中的集合
  ms.openlocfilehash: 7e1de34c9075826a6fcb6bf71cb01bfbd5c215ca
  ms.sourcegitcommit: 935d5267c44f9bce801468ef95f44572f1417e8c
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/28/2018
items:
- durationInMinutes: 2
  content: >
    本快速入门教程介绍了如何在 C# 中使用内插的字符串，以交互方式将值插入单个输出字符串中。 读者可以使用浏览器编写 C# 代码并即时查看编译和运行代码的结果。 本快速入门教程包含一系列课程，包括连接字符串、将值插入字符串，以及用不同方式设置这些值的格式。
- title: 创建内插字符串
  durationInMinutes: 2
  content: "在交互式窗口中，运行以下代码。 为此，请在交互式窗口中键入以下代码块（将“\\<name>”替换为自己的名称），再单击“运行”按钮：\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n当运行该程序时，它会在问候语中显示一个包含你的姓名的字符串。 <xref:System.Console.WriteLine%2A> 方法调用中包含的字符串是一个内插字符串。 这是一种模板，可让你用包含嵌入代码的字符串构造单个字符串（称为结果字符串）。 内插字符串特别适用于将值插入字符串或连接字符串（将字符串联在一起）。 \n\n该简单示例包含了每个内插字符串必须具有的两个元素： \n\n- 字符串文本以 `$` 字符开头，后接左双引号字符。 `$` 符号和引号字符之间不能有空格。 （如果希望看到包含空格会发生什么情况，请在交互式窗口中的 `$` 字符后面插入一个空格，然后单击“运行”按钮。 C# 编译器报错“意外的字符 '$'”。） \n\n- 一个或多个内插表达式。 左大括号和右大括号（`{` 和 `}`）指示内插表达式。 可将任何返回值的 C# 表达式置于大括号内（包括 `null`）。 \n\n下面再尝试一些其他数据类型的内插字符串示例。\n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: 包含不同的数据类型
  durationInMinutes: 3
  content: "在上一快速入门教程中，已使用内插的字符串，将一个字符串插入另一字符串中。 不过，内插字符串表达式可以是任何数据类型。 下面尝试一个具有多种数据类型值的内插字符串。 \n\n以下示例包含带有 `Vegetable` 对象、`Unit` 枚举成员、<xref:System.DateTime> 值和 <xref:System.Decimal> 值的内插表达式。 在交互式窗口中运行。\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n请注意，其中一个内插表达式包含控制台上显示的结果字符串中的 `item` 对象，在这种情况下，字符串“eggplant”将插入到结果字符串中。 这是因为，当内插表达式的类型不是字符串时，C# 编译器会执行以下操作：\n\n- 如果内插表达式为 `null`，内插表达式将返回一个空字符串（\"\" 或 <xref:System.String.Empty?displayProperty=nameWithType>）。\n\n- 如果内插表达式不是 `null`，则调用内插表达式类型的 `ToString` 方法。 你可以在内插表达式前面添加注释符号（`//`注释掉示例中的 `Vegetable.ToString` 方法的定义，以此方式来进行测试。 在输出中，字符串“eggplant”被替换为完全限定的类型名称（由 C# REPL 定义的名称空间以及类型名称），这是 <xref:System.Object.ToString?displayProperty=nameWithType> 方法的默认行为。   \n\n在此示例的输出中，日期过于精确（eggplant 的价格不会以秒为单位变化），且价格值没有标明货币单位。 下一步将介绍如何通过控制内插表达式返回的字符串格式来解决这些问题。\n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: 控制内插表达式的格式
  durationInMinutes: 5
  content: >
    上一节课将两个格式不正确的字符串插入到了结果字符串中。 一个是日期和时间值，只有日期是合适的。 另一个是价格没有标明货币单位。 这两个问题都很容易解决。 内插表达式可以包含控制特定类型格式的格式字符串。 将前面示例中的调用修改为 `Console.WriteLine`，以包含日期和价格字段的格式说明符，如以下行所示：


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    可通过在内插表达式后接冒号和格式字符串来指定格式字符串。 “d”是[标准日期和时间格式字符串](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，表示短日期格式。 “C2”是[标准数值格式字符串](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，用数字表示货币值（精确到小数点后两位）。


    .NET Standard 库中的许多类型支持一组预定义的格式字符串。 这些格式字符串包括所有数值类型以及日期和时间类型。 有关支持格式字符串的完整类型列表，请参阅 [.NET 中的格式化类型](../../standard/base-types/formatting-types.md)文章中的[格式字符串和. NET 类库类型](../../standard/base-types/formatting-types.md#stringRef)。 任何类型都可以支持一组格式字符串，你也可以开发自定义格式设置扩展，为现有类型提供自定义格式。 有关通过提供 <xref:System.ICustomFormatter> 实现进行自定义格式设置的信息，请参阅 [.NET 中的格式化类型](../../standard/base-types/formatting-types.md)文章中的[使用 ICustomFormatter 进行自定义格式设置](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter)。


    尝试在 .NET 编辑器中修改格式字符串，查看更改如何影响日期和时间以及数值的格式。 将 `{date:d}` 中的“d”更改为“t”（显示短时间格式）、“y”（显示年份和月份）和“yyyy”（显示四位数年份）。 将 `{price:C2}` 中的“C2”更改为“e”（用于指数计数法）和“F3”（使数值在小数点后保持三位数字）。


    除了控制格式之外，还可以控制内插表达式返回字符串的字段宽度和对齐方式。 下一步将介绍如何执行此操作。


    > [!NOTE]

    > 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。
- title: 控制内插表达式的字段宽度和对齐方式
  durationInMinutes: 6
  content: "通常，当结果字符串中包含内插表达式返回的字符串时，该字符串没有前导或尾随空格。 特别是对于使用一组数据的情况，使用内插表达式可以指定字段宽度及其对齐方式。 若要查看，请运行以下代码。\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n项目名称为左对齐，其数量为右对齐。 通过在表达式后面添加一个逗号 (\",\") 并指定字段宽度来指定对齐方式。 如果字段宽度是正数，则该字段为右对齐：\n\n```text\n{expression, width}\n```\n\n如果字段宽度是负数，则该字段为左对齐：\n\n```text\n{expression, -width}\n```\n尝试删除 `{\"Item\",-25}` 和 `{item.Key,-25}` 内插表达式中的负号，然后再次运行该示例。 此时，项目名称为右对齐。\n\n可在单个内插表达式中合并字段宽度和格式字符串。 字段宽度在前，后接冒号和格式字符串。 尝试以下示例程序，该程序使用定义的字段宽度显示三个格式化字符串。\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- content: "已完成“内插的字符串”快速入门教程。 \n\n可以在自己的本地开发环境中继续学习这些快速入门教程。 请先了解[本地开发](local-environment.md)基础知识，再选择一个快速入门教程。 可以再次尝试本练习，也可以直接学习下一个快速入门教程，亦可以重新开始学习 [C# 中的数字](numbers-in-csharp-local.md)快速入门教程。\n\n可在 C# 参考的[字符串内插](../language-reference/tokens/interpolated.md)主题中了解有关内插字符串的详细信息。"
