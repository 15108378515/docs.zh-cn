### YamlMime:Tutorial
title: "<span data-ttu-id=\"eb850-101\">C# 中的数字</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-101\">Numbers in C#</span></span>"
metadata:
  title: "“C# 中的数字”交互教程 - C# 快速入门"
  description: "在有关数字类型的该快速入门教程中，你将使用浏览器通过交互方式了解 C#。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。"
  audience: Developer
  ms.topic: get-started-article
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "<span data-ttu-id=\"eb850-105\">C# 中的分支和循环</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-105\">Branches and loops in C#</span></span>"
  displayType: two-column
  interactive: csharp
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: c714763870b0755ad42f919325bca69fccc0736a
  ms.sourcegitcommit: 3a96c706e4dbb4667bf3bf37edac9e1666646f93
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 02/27/2018
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"eb850-106\">该快速入门教程以交互方式介绍了 C# 中数字类型，你可使用浏览器来编写 C# 和查看代码的编译及运行结果。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-106\">This quick start teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"eb850-107\">具体包含一系列课程，探索了 C# 中的数字和数学运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-107\">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id=\"eb850-108\">这些课程介绍了 C# 语言的基础知识。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-108\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
- title: "<span data-ttu-id=\"eb850-109\">探索整数数学运算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-109\">Explore integer math</span></span>"
  durationInMinutes: 4
  content: "<span data-ttu-id=\"eb850-110\">在交互式窗口中，运行以下代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"eb850-111\">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n<span data-ttu-id=\"eb850-112\">刚刚看到的是一种基本的整数数学运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-112\">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id=\"eb850-113\">`int` 类型表示整数（正整数或负整数）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-113\">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id=\"eb850-114\">使用 `+` 符号执行加法运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-114\">You use the `+` symbol for addition.</span></span> <span data-ttu-id=\"eb850-115\">其他常见的整数数学运算包括：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-115\">Other common mathematical operations for integers include:</span></span>\n\n- <span data-ttu-id=\"eb850-116\">`-`：减法运算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-116\">`-` for subtraction</span></span>\n- <span data-ttu-id=\"eb850-117\">`*`：乘法运算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-117\">`*` for multiplication</span></span>\n- <span data-ttu-id=\"eb850-118\">`/`：除法运算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-118\">`/` for division</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"eb850-119\">在该快速入门教程中，你可在交互窗口中修改已编写的代码，自行探索相关内容。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-119\">Throughout this quick start, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id=\"eb850-120\">该快速入门教程提供可分步尝试的示例。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-120\">This quick start provides examples that you can try at each step.</span></span>\n\n<span data-ttu-id=\"eb850-121\">首先，探索这些不同类型的运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-121\">Start by exploring those different operations.</span></span> <span data-ttu-id=\"eb850-122\">修改第三行代码，尝试执行所有这些运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-122\">Modify the third line to try each of these operations.</span></span> <span data-ttu-id=\"eb850-123\">每次编辑后，单击“运行”按钮。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-123\">After each edit, click the **Run** button.</span></span>\n\n<span data-ttu-id=\"eb850-124\">减法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-124\">Subtraction:</span></span>\n\n```csharp\nint c = a - b;\n```\n\n<span data-ttu-id=\"eb850-125\">乘法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-125\">Multiplication:</span></span>\n\n```csharp\nint c = a * b;\n```\n\n<span data-ttu-id=\"eb850-126\">除法：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-126\">Division:</span></span> \n\n```csharp\nint c = a / b;\n```\n\n<span data-ttu-id=\"eb850-127\">如果愿意，也可以尝试在同一行中执行多个数学运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-127\">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"eb850-128\">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"eb850-129\">编译器会发现并报告这些错误。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"eb850-130\">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"eb850-131\">这样做有助于了解 C# 代码结构。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-131\">That exercise will help you learn the structure of C# code.</span></span>     \n\n> [!NOTE]\n> <span data-ttu-id=\"eb850-132\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-132\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb850-133\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-133\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb850-134\">探索运算顺序</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-134\">Explore order of operations</span></span>"
  durationInMinutes: 7
  content: "<span data-ttu-id=\"eb850-135\">C# 语言使用与数学运算规则一致的规则，定义不同数学运算的优先级。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-135\">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>\n<span data-ttu-id=\"eb850-136\">乘法和除法的优先级高于加法和减法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-136\">Multiplication and division take precedence over addition and subtraction.</span></span>\n<span data-ttu-id=\"eb850-137\">在交互式窗口中，运行以下代码进行探索：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-137\">Explore that by running the following code in the interactive window:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb850-138\">输出结果表明，乘法先于加法执行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-138\">The output demonstrates that the multiplication is performed before the addition.</span></span>\n\n<span data-ttu-id=\"eb850-139\">可以在要优先执行的一个或多个运算前后添加括号，从而强制改变运算顺序：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-139\">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb850-140\">通过组合多个不同的运算，进一步探索运算顺序。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-140\">Explore more by combining many different operations.</span></span> <span data-ttu-id=\"eb850-141\">将上面的第四行代码替换为以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-141\">Replace the fourth line above with something like this:</span></span>\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n<span data-ttu-id=\"eb850-142\">可能已注意到，整数有一个非常有趣的行为。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-142\">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id=\"eb850-143\">整数除法始终生成整数结果，即使预期结果有小数或分数部分也是如此。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-143\">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>\n\n<span data-ttu-id=\"eb850-144\">如果还没有注意到此行为，请试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-144\">If you haven't seen this behavior, try the following:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb850-145\">再次单击“运行”，看看结果如何。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-145\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb850-146\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-146\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb850-147\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-147\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb850-148\">探索整数运算精度和限值</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-148\">Explore integer precision and limits</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"eb850-149\">在上一个示例中，整数除法截断了结果。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-149\">That last sample showed you that integer division truncates the result.</span></span>\n<span data-ttu-id=\"eb850-150\">可以使用取模运算符（即 `%` 字符）计算余数：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-150\">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\n<span data-ttu-id=\"eb850-151\">C# 整数类型不同于数学上的整数的另一点是，`int` 类型有最小限值和最大限值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-151\">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id=\"eb850-152\">在交互式窗口中，运行以下代码，看看这些限值的运行机制如何：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-152\">Run this code in the interactive window to see those limits:</span></span>\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n<span data-ttu-id=\"eb850-153\">如果运算生成的值超过这些限值，则会出现下溢或溢出的情况。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-153\">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id=\"eb850-154\">答案似乎是从一个限值覆盖到另一个限值的范围。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-154\">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id=\"eb850-155\">例如，将以下两行代码添加到交互式窗口中：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-155\">Add these two lines to the interactive window to see an example:</span></span>\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n<span data-ttu-id=\"eb850-156\">可以看到，答案非常接近最小（负）整数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-156\">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id=\"eb850-157\">与 `min + 2` 相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-157\">It's the same as `min + 2`.</span></span> <span data-ttu-id=\"eb850-158\">加法运算会让整数溢出允许的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-158\">The addition operation **overflowed** the allowed values for integers.</span></span>\n<span data-ttu-id=\"eb850-159\">答案是一个非常大的负数，因为溢出从最大整数值覆盖回最小整数值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-159\">The answer is a very large negative number because an overflow \"wraps around\" from the largest possible integer value to the smallest.</span></span>\n\n<span data-ttu-id=\"eb850-160\">如果 `int` 类型无法满足需求，还会用到限值和精度不同的其他数字类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-160\">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id=\"eb850-161\">接下来，将探索这些类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-161\">Let's explore those next.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb850-162\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-162\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb850-163\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-163\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb850-164\">使用双精度类型</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-164\">Work with the double type</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"eb850-165\">`double` 数字类型表示双精度浮点数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-165\">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id=\"eb850-166\">这些词可能是第一次听说。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-166\">Those terms may be new to you.</span></span> <span data-ttu-id=\"eb850-167\">浮点数可用于表示数量级可能非常大或非常小的非整数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-167\">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id=\"eb850-168\">双精度意味着存储这些数字时使用的精度高于单精度。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-168\">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id=\"eb850-169\">在新式计算机上，使用双精度数字比使用单精度数字更为常见。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-169\">On modern computers, it is more common to use double precision than single precision numbers.</span></span>\n<span data-ttu-id=\"eb850-170\">接下来，将探索双精度类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-170\">Let's explore.</span></span> <span data-ttu-id=\"eb850-171\">在交互式窗口中，试运行以下代码，看看结果如何：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-171\">Try the following code in the interactive window and see the result:</span></span>\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb850-172\">可以看到，答案商包含小数部分。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-172\">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id=\"eb850-173\">试试对双精度类型使用更复杂一点的表达式：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-173\">Try a slightly more complicated expression with doubles:</span></span>\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb850-174\">双精度值的范围远大于整数值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-174\">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id=\"eb850-175\">在交互式窗口中，试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-175\">Try the following code in the interactive window:</span></span>\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n<span data-ttu-id=\"eb850-176\">打印出来的这些值用科学记数法表示。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-176\">These values are printed out in scientific notation.</span></span> <span data-ttu-id=\"eb850-177\">`E` 左侧为有效数字。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-177\">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id=\"eb850-178\">右侧为是 10 的 n 次幂。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-178\">The number to the right is the exponent, as a power of 10.</span></span> \n\n<span data-ttu-id=\"eb850-179\">与数学上的十进制数字一样，C# 中的双精度值可能会有四舍五入误差。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-179\">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id=\"eb850-180\">试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-180\">Try this code:</span></span>\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n<span data-ttu-id=\"eb850-181\">众所周知，`0.3` 循环小数与 `1/3` 并不完全相等。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-181\">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>\n\n<span data-ttu-id=\"eb850-182\">***挑战***</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-182\">***Challenge***</span></span>\n\n<span data-ttu-id=\"eb850-183\">尝试使用 `double` 类型执行其他的大小数、乘法和除法运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-183\">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id=\"eb850-184\">尝试执行更复杂的运算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-184\">Try more complicated calculations.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb850-185\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-185\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb850-186\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-186\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb850-187\">使用固定点类型</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-187\">Work with fixed point types</span></span>"
  durationInMinutes: 8
  content: "<span data-ttu-id=\"eb850-188\">大家已学习了 C# 中的基本数字类型，即整数和双精度。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-188\">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id=\"eb850-189\">下面将介绍另一种需要了解的类型，即 `decimal` 类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-189\">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id=\"eb850-190\">`decimal` 类型的范围较小，但精度高于 `double`。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-190\">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id=\"eb850-191\">“固定点”一词意味着，十进制小数点（或二进制小数点）不会移动。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-191\">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id=\"eb850-192\">让我们来实际操作一下：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-192\">Let's take a look:</span></span>\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n<span data-ttu-id=\"eb850-193\">可以看到，范围小于 `double` 类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-193\">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id=\"eb850-194\">通过试运行以下代码，可以看到十进制类型的精度更高：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-194\">You can see the greater precision with the decimal type by trying the following code:</span></span>\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n<span data-ttu-id=\"eb850-195\">数字中的 `M` 后缀指明了常数应如何使用 `decimal` 类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-195\">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>\n\n<span data-ttu-id=\"eb850-196\">可以看到，使用十进制类型执行数学运算时，十进制小数点右侧的数字更多。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-196\">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> \n\n<span data-ttu-id=\"eb850-197\">***挑战***</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-197\">***Challenge***</span></span>\n\n<span data-ttu-id=\"eb850-198\">至此，大家已了解不同的数字类型。请编写代码来计算圆面积（其中，半径为 2.50 厘米）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-198\">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id=\"eb850-199\">请注意，圆面积是用半径的平方乘以 PI 进行计算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-199\">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id=\"eb850-200\">小提示：.NET 包含 PI 常数 <xref:System.Math.PI?displayProperty=nameWithType>，可用于相应的值计算。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-200\">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"eb850-201\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-201\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb850-202\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-202\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n\n<span data-ttu-id=\"eb850-203\">你应获得 19 和 20 之间的答案。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-203\">You should get an answer between 19 and 20.</span></span>\n"
- title: "<span data-ttu-id=\"eb850-204\">完成挑战</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-204\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "<span data-ttu-id=\"eb850-205\">最后是否生成如下代码？</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-205\">Did you come up with something like this?</span></span>\n\n```csharp\ndouble radius = 2.50;\ndouble area = Math.PI * radius * radius;\nConsole.WriteLine(area);\n```\n\n<span data-ttu-id=\"eb850-206\">如果需要，可以试用一些其他公式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-206\">Try some other formulas if you'd like.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb850-207\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-207\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb850-208\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-208\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"eb850-209\">已完成“C# 中的数字”快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-209\">You've completed the \"Numbers in C#\" quick start.</span></span> \n\n<span data-ttu-id=\"eb850-210\">可以在自己的开发环境中继续学习这些快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-210\">You can continue these quick starts on your own development environment.</span></span> <span data-ttu-id=\"eb850-211\">了解[本地开发](local-environment.md)的基础知识并选择一个快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-211\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"eb850-212\">可以再次尝试本练习、直接进入到下一个快速入门教程，或重新开始学习 [C# 中的数字](numbers-in-csharp-local.md)快速入门教程。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-212\">You can try this same exercise, move directly to the next quick start, or start again at with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"eb850-213\">可以参阅下面的主题，详细了解 C# 中的数字：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-213\">You can learn more about numbers in C# in the following topics:</span></span>\n\n<span data-ttu-id=\"eb850-214\">[整型类型表](../language-reference/keywords/integral-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-214\">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  \n<span data-ttu-id=\"eb850-215\">[浮点型表](../language-reference/keywords/floating-point-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-215\">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  \n<span data-ttu-id=\"eb850-216\">[内置类型表](../language-reference/keywords/built-in-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-216\">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  \n<span data-ttu-id=\"eb850-217\">[隐式数值转换表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-217\">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  \n[<span data-ttu-id=\"eb850-218\">显式数值转换表</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb850-218\">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
