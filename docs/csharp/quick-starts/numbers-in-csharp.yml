### YamlMime:YamlDocument
documentType: Tutorial
title: "C# 中的数字"
metadata:
  title: "C# 中的数字"
  description: "在有关数字类型的该快速入门教程中，你将使用浏览器通过交互方式了解 C#。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。"
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "C# 中的分支和循环"
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 12/07/2017
items:
- durationInMinutes: 1
  content: "该快速入门教程以交互方式介绍了 C# 中数字类型，你可使用浏览器来编写 C# 和查看代码的编译及运行结果。 具体包含一系列课程，探索了 C# 中的数字和数学运算。 这些课程介绍了 C# 语言的基础知识。\n"
- title: "探索整数数学运算"
  durationInMinutes: 4
  content: "在交互式窗口中，运行以下代码。 为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n刚刚看到的是一种基本的整数数学运算。 `int` 类型表示整数（正整数或负整数）。 使用 `+` 符号执行加法运算。 其他常见的整数数学运算包括：\n\n- `-`：减法运算\n- `*`：乘法运算\n- `/`：除法运算\n\n> [!TIP]\n> 在该快速入门教程中，你可在交互窗口中修改已编写的代码，自行探索相关内容。 该快速入门教程提供可分步尝试的示例。\n\n首先，探索这些不同类型的运算。 修改第三行代码，尝试执行所有这些运算。 每次编辑后，单击“运行”按钮。\n\n减法：\n\n```csharp\nint c = a - b;\n```\n\n乘法：\n\n```csharp\nint c = a * b;\n```\n\n除法： \n\n```csharp\nint c = a / b;\n```\n\n如果愿意，也可以尝试在同一行中执行多个数学运算。\n\n> [!TIP]\n> 在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。 编译器会发现并报告这些错误。 如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。\n> 这样做有助于了解 C# 代码结构。     \n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: "探索运算顺序"
  durationInMinutes: 7
  content: "C# 语言使用与数学运算规则一致的规则，定义不同数学运算的优先级。\n乘法和除法的优先级高于加法和减法。\n在交互式窗口中，运行以下代码进行探索：\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n输出结果表明，乘法先于加法执行。\n\n可以在要优先执行的一个或多个运算前后添加括号，从而强制改变运算顺序：\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n通过组合多个不同的运算，进一步探索运算顺序。 将上面的第四行代码替换为以下代码：\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n可能已注意到，整数有一个非常有趣的行为。 整数除法始终生成整数结果，即使预期结果有小数或分数部分也是如此。\n\n如果还没有注意到此行为，请试运行以下代码：\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n再次单击“运行”，看看结果如何。\n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: "探索整数运算精度和限值"
  durationInMinutes: 5
  content: "在上一个示例中，整数除法截断了结果。\n可以使用取模运算符（即 `%` 字符）计算余数：\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nC# 整数类型不同于数学上的整数的另一点是，`int` 类型有最小限值和最大限值。 在交互式窗口中，运行以下代码，看看这些限值的运行机制如何：\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n如果运算生成的值超过这些限值，则会出现下溢或溢出的情况。 答案似乎是从一个限值覆盖到另一个限值的范围。 例如，将以下两行代码添加到交互式窗口中：\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n可以看到，答案非常接近最小（负）整数。 与 `min + 2` 相同。 加法运算会让整数溢出允许的值。\n答案是一个非常大的负数，因为溢出从最大整数值覆盖回最小整数值。\n\n如果 `int` 类型无法满足需求，还会用到限值和精度不同的其他数字类型。 接下来，将探索这些类型。\n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: "使用双精度类型"
  durationInMinutes: 5
  content: "`double` 数字类型表示双精度浮点数。 这些词可能是第一次听说。 浮点数可用于表示数量级可能非常大或非常小的非整数。 双精度意味着存储这些数字时使用的精度高于单精度。 在新式计算机上，使用双精度数字比使用单精度数字更为常见。\n接下来，将探索双精度类型。 在交互式窗口中，试运行以下代码，看看结果如何：\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n可以看到，答案商包含小数部分。 试试对双精度类型使用更复杂一点的表达式：\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n双精度值的范围远大于整数值。 在交互式窗口中，试运行以下代码：\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n打印出来的这些值用科学记数法表示。 `E` 左侧为有效数字。 右侧为是 10 的 n 次幂。 \n\n与数学上的十进制数字一样，C# 中的双精度值可能会有四舍五入误差。 试运行以下代码：\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n众所周知，`0.3` 循环小数与 `1/3` 并不完全相等。\n\n***挑战***\n\n尝试使用 `double` 类型执行其他的大小数、乘法和除法运算。  尝试执行更复杂的运算。\n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: "使用固定点类型"
  durationInMinutes: 8
  content: "大家已学习了 C# 中的基本数字类型，即整数和双精度。  下面将介绍另一种需要了解的类型，即 `decimal` 类型。 `decimal` 类型的范围较小，但精度高于 `double`。 “固定点”一词意味着，十进制小数点（或二进制小数点）不会移动。 让我们来实际操作一下：\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n可以看到，范围小于 `double` 类型。 通过试运行以下代码，可以看到十进制类型的精度更高：\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n数字中的 `M` 后缀指明了常数应如何使用 `decimal` 类型。\n\n可以看到，使用十进制类型执行数学运算时，十进制小数点右侧的数字更多。 \n\n***挑战***\n\n至此，大家已了解不同的数字类型。请编写代码来计算圆面积（其中，半径为 2.50 英寸）。 请注意，圆面积是用半径的平方乘以 PI 进行计算。 小提示：C# 包含 PI 常数 <xref:System.Math.PI?displayProperty=nameWithType>，可用于相应的值计算。 \n\n> [!NOTE]\n> 此联机编码体验处于预览模式。 如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。\n"
- title: "完成挑战"
  durationInMinutes: 1
  content: "已完成“C# 中的数字”快速入门教程。 \n\n可以在自己的开发环境中继续这些快速入门教程。 .NET 主题 [10 分钟入门](https://www.microsoft.com/net/core)介绍了如何设置本地开发环境。 完成之后，请在本地环境中继续学习[分支和循环](branches-and-loops-local.md)。\n\n可以参阅下面的主题，详细了解 C# 中的数字：\n\n[整型类型表](../language-reference/keywords/integral-types-table.md)   \n[浮点型表](../language-reference/keywords/floating-point-types-table.md)   \n[内置类型表](../language-reference/keywords/built-in-types-table.md)   \n[隐式数值转换表](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[显式数值转换表](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
