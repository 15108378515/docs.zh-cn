### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="072ff-101">C# 中的数字</span><span class="sxs-lookup"><span data-stu-id="072ff-101">Numbers in C#</span></span>'
metadata:
  title: '<span data-ttu-id="072ff-102">C# 中的数字</span><span class="sxs-lookup"><span data-stu-id="072ff-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="072ff-103">本教程介绍了数字类型，读者可以使用浏览器通过交互方式了解 C#。</span><span class="sxs-lookup"><span data-stu-id="072ff-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="072ff-104">读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="072ff-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="072ff-105">本教程通过交互方式介绍了 C# 中的数字类型，读者可以使用浏览器编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="072ff-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="072ff-106">具体包含一系列课程，探索了 C# 中的数字和数学运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="072ff-107">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="072ff-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="072ff-108">探索整数数学运算</span><span class="sxs-lookup"><span data-stu-id="072ff-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="072ff-109">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="072ff-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="072ff-110">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class="sxs-lookup"><span data-stu-id="072ff-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="072ff-111">刚刚看到的是一种基本的整数数学运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="072ff-112">`int` 类型表示整数（正整数或负整数）。</span><span class="sxs-lookup"><span data-stu-id="072ff-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="072ff-113">使用 `+` 符号执行加法运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="072ff-114">其他常见的整数数学运算包括：</span><span class="sxs-lookup"><span data-stu-id="072ff-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="072ff-115">`-`：减法运算</span><span class="sxs-lookup"><span data-stu-id="072ff-115">`-` for subtraction</span></span>
      - <span data-ttu-id="072ff-116">`*`：乘法运算</span><span class="sxs-lookup"><span data-stu-id="072ff-116">`*` for multiplication</span></span>
      - <span data-ttu-id="072ff-117">`/`：除法运算</span><span class="sxs-lookup"><span data-stu-id="072ff-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="072ff-118">在本教程中，可以修改在交互式窗口中已编写的代码，自行进行探索。</span><span class="sxs-lookup"><span data-stu-id="072ff-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="072ff-119">本教程提供了可分步试运行的示例。</span><span class="sxs-lookup"><span data-stu-id="072ff-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="072ff-120">首先，探索这些不同类型的运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-120">Start by exploring those different operations.</span></span> <span data-ttu-id="072ff-121">修改第三行代码，尝试执行所有这些运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="072ff-122">每次编辑后，单击“运行”按钮。</span><span class="sxs-lookup"><span data-stu-id="072ff-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="072ff-123">减法：</span><span class="sxs-lookup"><span data-stu-id="072ff-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="072ff-124">乘法：</span><span class="sxs-lookup"><span data-stu-id="072ff-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="072ff-125">除法：</span><span class="sxs-lookup"><span data-stu-id="072ff-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="072ff-126">如果愿意，也可以尝试在同一行中执行多个数学运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="072ff-127">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class="sxs-lookup"><span data-stu-id="072ff-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="072ff-128">编译器会发现并报告这些错误。</span><span class="sxs-lookup"><span data-stu-id="072ff-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="072ff-129">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class="sxs-lookup"><span data-stu-id="072ff-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="072ff-130">这样做有助于了解 C# 代码结构。</span><span class="sxs-lookup"><span data-stu-id="072ff-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="072ff-131">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="072ff-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="072ff-132">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="072ff-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="072ff-133">探索运算顺序</span><span class="sxs-lookup"><span data-stu-id="072ff-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="072ff-134">C# 语言使用与数学运算规则一致的规则，定义不同数学运算的优先级。</span><span class="sxs-lookup"><span data-stu-id="072ff-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="072ff-135">乘法和除法的优先级高于加法和减法。</span><span class="sxs-lookup"><span data-stu-id="072ff-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="072ff-136">在交互式窗口中，运行以下代码进行探索：</span><span class="sxs-lookup"><span data-stu-id="072ff-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="072ff-137">输出结果表明，乘法先于加法执行。</span><span class="sxs-lookup"><span data-stu-id="072ff-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="072ff-138">可以在要优先执行的一个或多个运算前后添加括号，从而强制改变运算顺序：</span><span class="sxs-lookup"><span data-stu-id="072ff-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="072ff-139">通过组合多个不同的运算，进一步探索运算顺序。</span><span class="sxs-lookup"><span data-stu-id="072ff-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="072ff-140">将上面的第四行代码替换为以下代码：</span><span class="sxs-lookup"><span data-stu-id="072ff-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="072ff-141">可能已注意到，整数有一个非常有趣的行为。</span><span class="sxs-lookup"><span data-stu-id="072ff-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="072ff-142">整数除法始终生成整数结果，即使数学运算结果有小数或分数部分，也不例外。</span><span class="sxs-lookup"><span data-stu-id="072ff-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="072ff-143">如果还没有注意到此行为，请试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="072ff-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="072ff-144">再次单击“运行”，看看结果如何。</span><span class="sxs-lookup"><span data-stu-id="072ff-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="072ff-145">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="072ff-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="072ff-146">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="072ff-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="072ff-147">探索整数运算精度和限值</span><span class="sxs-lookup"><span data-stu-id="072ff-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="072ff-148">在上一个示例中，整数除法截断了结果。</span><span class="sxs-lookup"><span data-stu-id="072ff-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="072ff-149">可以使用取模运算符（即 `%` 字符）计算余数：</span><span class="sxs-lookup"><span data-stu-id="072ff-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="072ff-150">C# 整数类型不同于数学上的整数的另一点是，`int` 类型有最小限值和最大限值。</span><span class="sxs-lookup"><span data-stu-id="072ff-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="072ff-151">在交互式窗口中，运行以下代码，看看这些限值的运行机制如何：</span><span class="sxs-lookup"><span data-stu-id="072ff-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="072ff-152">如果运算生成的值超过这些限值，则会出现下溢或溢出的情况。</span><span class="sxs-lookup"><span data-stu-id="072ff-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="072ff-153">答案似乎是从一个限值覆盖到另一个限值的范围。</span><span class="sxs-lookup"><span data-stu-id="072ff-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="072ff-154">例如，将以下两行代码添加到交互式窗口中：</span><span class="sxs-lookup"><span data-stu-id="072ff-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="072ff-155">可以看到，答案非常接近最小（负）整数。</span><span class="sxs-lookup"><span data-stu-id="072ff-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="072ff-156">与 `min + 2` 相同。</span><span class="sxs-lookup"><span data-stu-id="072ff-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="072ff-157">加法运算会让整数溢出允许的值。</span><span class="sxs-lookup"><span data-stu-id="072ff-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="072ff-158">答案是一个非常大的负数，因为溢出从最大整数值覆盖回最小整数值。</span><span class="sxs-lookup"><span data-stu-id="072ff-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="072ff-159">如果 `int` 类型无法满足需求，还会用到限值和精度不同的其他数字类型。</span><span class="sxs-lookup"><span data-stu-id="072ff-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="072ff-160">接下来，将探索这些类型。</span><span class="sxs-lookup"><span data-stu-id="072ff-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="072ff-161">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="072ff-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="072ff-162">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="072ff-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="072ff-163">使用双精度类型</span><span class="sxs-lookup"><span data-stu-id="072ff-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="072ff-164">`double` 数字类型表示双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="072ff-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="072ff-165">这些词可能是第一次听说。</span><span class="sxs-lookup"><span data-stu-id="072ff-165">Those terms may be new to you.</span></span> <span data-ttu-id="072ff-166">浮点数可用于表示数量级可能非常大或非常小的非整数。</span><span class="sxs-lookup"><span data-stu-id="072ff-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="072ff-167">双精度意味着存储这些数字时使用的精度高于单精度。</span><span class="sxs-lookup"><span data-stu-id="072ff-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="072ff-168">在新式计算机上，使用双精度数字比使用单精度数字更为常见。</span><span class="sxs-lookup"><span data-stu-id="072ff-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="072ff-169">接下来，将探索双精度类型。</span><span class="sxs-lookup"><span data-stu-id="072ff-169">Let's explore.</span></span> <span data-ttu-id="072ff-170">在交互式窗口中，试运行以下代码，看看结果如何：</span><span class="sxs-lookup"><span data-stu-id="072ff-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="072ff-171">可以看到，答案商包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="072ff-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="072ff-172">试试对双精度类型使用更复杂一点的表达式：</span><span class="sxs-lookup"><span data-stu-id="072ff-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="072ff-173">双精度值的范围远大于整数值。</span><span class="sxs-lookup"><span data-stu-id="072ff-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="072ff-174">在交互式窗口中，试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="072ff-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="072ff-175">打印出来的这些值用科学记数法表示。</span><span class="sxs-lookup"><span data-stu-id="072ff-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="072ff-176">`E` 左侧为有效数字。</span><span class="sxs-lookup"><span data-stu-id="072ff-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="072ff-177">右侧为是 10 的 n 次幂。</span><span class="sxs-lookup"><span data-stu-id="072ff-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="072ff-178">在内部，这些数字的表示方法类似，均以二进制形式表示。</span><span class="sxs-lookup"><span data-stu-id="072ff-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="072ff-179">一部分表示二进制有效数字。</span><span class="sxs-lookup"><span data-stu-id="072ff-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="072ff-180">另一部分表示，二进制小数点（类同于十进制小数点）相对于有效数字的位置。</span><span class="sxs-lookup"><span data-stu-id="072ff-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="072ff-181">与数学上的十进制数字一样，C# 中的双精度值可能会有四舍五入误差。</span><span class="sxs-lookup"><span data-stu-id="072ff-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="072ff-182">试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="072ff-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="072ff-183">众所周知，`0.3` 循环小数与 `1/3` 并不完全相等。</span><span class="sxs-lookup"><span data-stu-id="072ff-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="072ff-184">***挑战***</span><span class="sxs-lookup"><span data-stu-id="072ff-184">***Challenge***</span></span>

      <span data-ttu-id="072ff-185">尝试使用 `double` 类型执行其他的大小数、乘法和除法运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="072ff-186">尝试执行更复杂的运算。</span><span class="sxs-lookup"><span data-stu-id="072ff-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="072ff-187">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="072ff-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="072ff-188">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="072ff-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="072ff-189">使用固定点类型</span><span class="sxs-lookup"><span data-stu-id="072ff-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="072ff-190">大家已学习了 C# 中的基本数字类型，即整数和双精度。</span><span class="sxs-lookup"><span data-stu-id="072ff-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="072ff-191">下面将介绍另一种需要了解的类型，即 `decimal` 类型。</span><span class="sxs-lookup"><span data-stu-id="072ff-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="072ff-192">`decimal` 类型的范围较小，但精度高于 `double`。</span><span class="sxs-lookup"><span data-stu-id="072ff-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="072ff-193">“固定点”一词意味着，十进制小数点（或二进制小数点）不会移动。</span><span class="sxs-lookup"><span data-stu-id="072ff-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="072ff-194">让我们来实际操作一下：</span><span class="sxs-lookup"><span data-stu-id="072ff-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="072ff-195">可以看到，范围小于 `double` 类型。</span><span class="sxs-lookup"><span data-stu-id="072ff-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="072ff-196">通过试运行以下代码，可以看到十进制类型的精度更高：</span><span class="sxs-lookup"><span data-stu-id="072ff-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="072ff-197">数字中的 `M` 后缀指明了常数应如何使用 `decimal` 类型。</span><span class="sxs-lookup"><span data-stu-id="072ff-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="072ff-198">可以看到，使用十进制类型执行数学运算时，十进制小数点右侧的数字更多。</span><span class="sxs-lookup"><span data-stu-id="072ff-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="072ff-199">***挑战***</span><span class="sxs-lookup"><span data-stu-id="072ff-199">***Challenge***</span></span>

      <span data-ttu-id="072ff-200">至此，大家已了解不同的数字类型。请编写代码来计算圆面积（其中，半径为 2.50 英寸）。</span><span class="sxs-lookup"><span data-stu-id="072ff-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="072ff-201">请注意，圆面积是用半径的平方乘以 PI 进行计算。</span><span class="sxs-lookup"><span data-stu-id="072ff-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="072ff-202">小提示：C# 包含 PI 常数 `Math.PI`，可用于相应的值计算。</span><span class="sxs-lookup"><span data-stu-id="072ff-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="072ff-203">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="072ff-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="072ff-204">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="072ff-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="072ff-205">完成挑战</span><span class="sxs-lookup"><span data-stu-id="072ff-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="072ff-206">已完成“C# 中的数字”教程。</span><span class="sxs-lookup"><span data-stu-id="072ff-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="072ff-207">可以参阅下面的主题，详细了解 C# 中的数字：</span><span class="sxs-lookup"><span data-stu-id="072ff-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="072ff-208">[整型类型表](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="072ff-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="072ff-209">[浮点型表](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="072ff-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="072ff-210">[内置类型表](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="072ff-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="072ff-211">[隐式数值转换表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="072ff-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="072ff-212">显式数值转换表</span><span class="sxs-lookup"><span data-stu-id="072ff-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)